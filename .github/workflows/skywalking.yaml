# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on:
  push:
    branches:
      - master

env:
  SW_AGENT_JDK_VERSION: 8
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5 # Cache restore timeout

jobs:
  dist-tar:
    name: Build dist tar
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          persist-credentials: false
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"
          cache: "maven"
      - name: Build distribution tar
        run: |
          ./mvnw clean flatten:flatten install javadoc:javadoc -B -q -Pall \
            -Dmaven.test.skip \
            -Dcheckstyle.skip \
            -Dgpg.skip
      - name: Verify builds are reproducible
        run: ./mvnw -Dmaven.test.skip clean flatten:flatten verify artifact:compare -Pall -Dgpg.skip
      - uses: actions/upload-artifact@v4
        name: Upload distribution tar
        with:
          name: dist
          path: dist

  docker:
    name: Docker images
    needs: [dist-tar]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        java-version: [11, 17]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          persist-credentials: false
      - uses: actions/download-artifact@v4
        name: Download distribution tar
        with:
          name: dist
          path: dist
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}
      - name: Build and save docker images
        env:
          SW_OAP_BASE_IMAGE: eclipse-temurin:${{ matrix.java-version }}-jre
        run: |
          make docker.all || make docker.all
          docker save -o docker-images-skywalking-oap.tar skywalking/oap:latest
          docker save -o docker-images-skywalking-ui.tar skywalking/ui:latest
      - name: Upload docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-${{ matrix.java-version }}
          path: docker-images-skywalking-*.tar

  e2e-test:
    name: E2E test
    needs: [docker, dist-tar]
    runs-on: ${{ matrix.test.runs-on || 'ubuntu-latest' }}
    timeout-minutes: 60
    env:
      OTEL_COLLECTOR_VERSION: 0.102.1
    strategy:
      fail-fast: false
      matrix:
        test:
          - name: Agent PHP
            config: test/e2e-v2/cases/php/e2e.yaml
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          persist-credentials: false
      - run: grep -v '^#' test/e2e-v2/script/env >> "$GITHUB_ENV"
      - uses: apache/skywalking-cli/actions/setup@master
        with:
          version: ${{ env.SW_CTL_COMMIT }}
      - uses: actions/download-artifact@v4
        name: Download docker images
        with:
          name: docker-images-11
          path: docker-images
      - name: Load docker images
        run: |
          find docker-images -name "*.tar" -exec docker load -i {} \;
          find docker-images -name "*.tar" -exec rm {} \;
      - uses: actions/download-artifact@v4
        name: Download distribution tar
        with:
          name: dist
          path: dist
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('test/e2e-v2/java-test-service/**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Prepare test services
        shell: bash
        run: ./mvnw -B -q -f test/e2e-v2/java-test-service/pom.xml clean flatten:flatten package
      - name: Set env var
        run: |
          echo "${{ matrix.test.env }}"  >> $GITHUB_ENV
      - name: Build test image
        if: matrix.test.docker != null
        run: docker build -t ${{ matrix.test.docker.name }} -f ${{ matrix.test.docker.base }}/${{ matrix.test.docker.file }} ${{ matrix.test.docker.base }}
      - name: ${{ matrix.test.name }}
        uses: apache/skywalking-infra-e2e@cf589b4a0b9f8e6f436f78e9cfd94a1ee5494180
        with:
          e2e-file: $GITHUB_WORKSPACE/${{ matrix.test.config }}
      - if: ${{ always() }}
        run: cat /tmp/skywalking-agent.log
      - if: ${{ failure() }}
        run: |
          df -h
          du -sh .
          docker images
      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        name: Upload Logs
        with:
          name: test-logs-${{ matrix.test.name }}
          path: "${{ env.SW_INFRA_E2E_LOG_DIR }}"

